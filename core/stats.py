from typing import Self
from dataclasses import dataclass

from tianshou.policy.base import TrainingStats
from tianshou.data import CollectStats, SequenceSummaryStats

import numpy as np


@dataclass(kw_only=True)
class CoreTrainingStats(TrainingStats):
    policy_stats: TrainingStats
    self_model_stats: TrainingStats
    env_model_stats: TrainingStats


@dataclass(kw_only=True)
class EpNStepCollectStats(CollectStats):
    """A data structure for storing the statistics of the various rollouts.

    To Tianshou's original CollectStats we add intrinsic rewards and the distinction between episodic and n-step returns.
    """

    ep_returns: np.ndarray
    """The collected episodic returns."""
    ep_int_returns: np.ndarray
    """The collected episodic (fast) intrinsic returns."""
    returns: np.ndarray
    """The collected n-step returns."""
    int_returns: np.ndarray
    """The collected (fast) intrinsic returns."""

    ep_returns_stat: (
        SequenceSummaryStats | None
    )  # None if no episode ends during the collect step
    """Stats of the collected episodic returns."""
    ep_int_returns_stat: (
        SequenceSummaryStats | None
    )  # None if no episode ends during the collect step
    """Stats of the collected episodic (fast) intrinsic returns."""
    returns_stat: SequenceSummaryStats
    """Stats of the collected n-step returns."""
    int_returns_stat: SequenceSummaryStats
    """Stats of the collected (fast) intrinsic returns."""

    @classmethod
    def with_autogenerated_stats(
        cls,
        *,
        ep_returns: np.ndarray,
        ep_int_returns: np.ndarray,
        lens: np.ndarray,
        returns: np.ndarray,
        int_returns: np.ndarray,
        n_collected_episodes: int = 0,
        n_collected_steps: int = 0,
        collect_time: float = 0.0,
        collect_speed: float = 0.0,
    ) -> Self:
        """Returns a new instance with the stats autogenerated from the given input arguments."""
        # episodic statistics
        ep_returns_stat = (
            SequenceSummaryStats.from_sequence(ep_returns)
            if ep_returns.size > 0
            else None
        )
        ep_int_returns_stat = (
            SequenceSummaryStats.from_sequence(ep_int_returns)
            if ep_int_returns.size > 0
            else None
        )
        lens_stat = SequenceSummaryStats.from_sequence(lens) if lens.size > 0 else None

        # n-step statistics
        returns_stat = (
            SequenceSummaryStats.from_sequence(returns) if returns.size > 0 else None
        )
        int_returns_stat = (
            SequenceSummaryStats.from_sequence(int_returns)
            if int_returns.size > 0
            else None
        )

        return cls(
            ep_returns=ep_returns,
            ep_returns_stat=ep_returns_stat,
            ep_int_returns=ep_int_returns,
            ep_int_returns_stat=ep_int_returns_stat,
            lens=np.array(lens, dtype=np.int32),
            lens_stat=lens_stat,
            n_collected_episodes=n_collected_episodes,
            returns=returns,
            returns_stat=returns_stat,
            int_returns=int_returns,
            int_returns_stat=int_returns_stat,
            n_collected_steps=n_collected_steps,
            collect_time=collect_time,
            collect_speed=collect_speed,
        )
